import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

const TeamSelector = () => {
  const [totalPlayers, setTotalPlayers] = useState('');
  const [isSpinning, setIsSpinning] = useState(false);
  const [currentPlayer, setCurrentPlayer] = useState(1);
  const [rotation, setRotation] = useState(0);
  const [gameStarted, setGameStarted] = useState(false);
  const [selectedTeam, setSelectedTeam] = useState(null);
  const [teams, setTeams] = useState({ red: [], yellow: [] });
  const wheelRef = useRef(null);

  const startGame = () => {
    if (totalPlayers > 0) {
      setGameStarted(true);
      setTeams({ red: [], yellow: [] });
      setCurrentPlayer(1);
    }
  };

  const spinWheel = () => {
    if (isSpinning) return;

    setIsSpinning(true);
    setSelectedTeam(null);

    // Random number of full rotations (3-5) plus a random section
    const spinDegrees = 1080 + Math.random() * 720;
    const newRotation = rotation + spinDegrees;
    setRotation(newRotation);

    // Calculate final position and determine team
    setTimeout(() => {
      const finalAngle = newRotation % 360;
      const section = Math.floor((finalAngle + 22.5) / 45) % 8;
      const team = section % 2 === 0 ? 'red' : 'yellow';

      // Check if we can add to this team
      const maxPerTeam = Math.ceil(parseInt(totalPlayers) / 2);
      if (teams[team].length < maxPerTeam && 
          (teams.red.length + teams.yellow.length) < parseInt(totalPlayers)) {
        setSelectedTeam(team);
        setTeams(prev => ({
          ...prev,
          [team]: [...prev[team], currentPlayer]
        }));
        setCurrentPlayer(prev => prev + 1);
      }

      setIsSpinning(false);
    }, 3000);
  };

  const canAddMorePlayers = teams.red.length + teams.yellow.length < parseInt(totalPlayers);

  return (
    <div className="flex flex-col items-center gap-8 p-4 max-w-2xl mx-auto">
      {!gameStarted ? (
        <Card className="w-full">
          <CardContent className="p-6">
            <div className="flex flex-col gap-4">
              <label className="text-lg font-medium">Liczba graczy:</label>
              <Input
                type="number"
                min="2"
                value={totalPlayers}
                onChange={(e) => setTotalPlayers(e.target.value)}
                className="text-lg"
              />
              <Button 
                onClick={startGame}
                disabled={!totalPlayers || totalPlayers < 2}
                className="w-full mt-4"
              >
                Rozpocznij grę
              </Button>
            </div>
          </CardContent>
        </Card>
      ) : (
        <>
          {/* Wheel */}
          <div className="relative w-64 h-64">
            <svg
              ref={wheelRef}
              className="w-full h-full"
              viewBox="0 0 100 100"
              style={{
                transform: `rotate(${rotation}deg)`,
                transition: isSpinning ? 'transform 3s cubic-bezier(0.17, 0.67, 0.12, 0.99)' : 'none'
              }}
            >
              {[...Array(8)].map((_, i) => (
                <path
                  key={i}
                  d={`M50,50 L${50 + 45 * Math.cos((i * Math.PI) / 4)},${
                    50 + 45 * Math.sin((i * Math.PI) / 4)
                  } A45,45 0 0,1 ${50 + 45 * Math.cos(((i + 1) * Math.PI) / 4)},${
                    50 + 45 * Math.sin(((i + 1) * Math.PI) / 4)
                  } Z`}
                  fill={i % 2 === 0 ? '#EF4444' : '#EAB308'}
                />
              ))}
              <circle cx="50" cy="50" r="5" fill="#333" />
            </svg>
            <div className="absolute top-full mt-4 w-full text-center">
              {selectedTeam && (
                <div className={`text-2xl font-bold animate-bounce ${
                  selectedTeam === 'red' ? 'text-red-500' : 'text-yellow-500'
                }`}>
                  {selectedTeam === 'red' ? 'CZERWONY' : 'ŻÓŁTY'}
                </div>
              )}
            </div>
          </div>

          {/* Spin button */}
          <Button
            onClick={spinWheel}
            disabled={isSpinning || !canAddMorePlayers}
            className="w-48 h-12 text-lg"
          >
            {isSpinning ? 'Losowanie...' : 'LOSUJ'}
          </Button>

          {/* Teams table */}
          <Card className="w-full mt-8">
            <CardContent className="p-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h3 className="text-xl font-bold text-red-500 mb-4">CZERWONY</h3>
                  <ul className="space-y-2">
                    {teams.red.map(player => (
                      <li key={player} className="text-lg">Gracz {player}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h3 className="text-xl font-bold text-yellow-500 mb-4">ŻÓŁTY</h3>
                  <ul className="space-y-2">
                    {teams.yellow.map(player => (
                      <li key={player} className="text-lg">Gracz {player}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>

          {!canAddMorePlayers && (
            <Button
              onClick={() => {
                setGameStarted(false);
                setTeams({ red: [], yellow: [] });
                setCurrentPlayer(1);
                setRotation(0);
              }}
              className="mt-4"
            >
              Nowa gra
            </Button>
          )}
        </>
      )}
    </div>
  );
};

export default TeamSelector;
